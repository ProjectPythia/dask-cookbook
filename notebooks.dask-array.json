{"version":2,"kind":"Notebook","sha256":"e955dacf9f87e92d49fd92a3aca36394be3622d7d7b4c03f42e57a32cdf74925","slug":"notebooks.dask-array","location":"/notebooks/01-dask-array.ipynb","dependencies":[],"frontmatter":{"title":"Dask Array","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Negin Sobhani","given":"Negin","family":"Sobhani"},"name":"Negin Sobhani","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Brian Vanderwende","given":"Brian","family":"Vanderwende"},"name":"Brian Vanderwende","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Deepak Cherian","given":"Deepak","family":"Cherian"},"name":"Deepak Cherian","id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Ben Kirk","given":"Ben","family":"Kirk"},"name":"Ben Kirk","id":"contributors-myst-generated-uid-3"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/dask-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/dask-cookbook/blob/main/notebooks/01-dask-array.ipynb","thumbnail":"/dask-cookbook/build/efb0893141695015b5a57e9702d22b2e.svg","exports":[{"format":"ipynb","filename":"01-dask-array.ipynb","url":"/dask-cookbook/build/01-dask-array-85a14bb27177bb2dc2dae29e6993801d.ipynb"}]},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{},"version_major":2,"version_minor":0}},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"image","url":"/dask-cookbook/build/efb0893141695015b5a57e9702d22b2e.svg","alt":"Dask logo","width":"30%","key":"hzKMwJ5t8j","urlSource":"https://docs.dask.org/en/stable/_images/dask_horizontal.svg"}],"key":"NQhhrxEVo7"},{"type":"heading","depth":1,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Dask Array","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"jphogSgBrD"}],"identifier":"dask-array","label":"Dask Array","html_id":"dask-array","implicit":true,"key":"dVppESYWqT"},{"type":"heading","depth":3,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"In this tutorial, you learn:","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Oj88b80FdT"}],"identifier":"in-this-tutorial-you-learn","label":"In this tutorial, you learn:","html_id":"in-this-tutorial-you-learn","implicit":true,"key":"yyRHJoHXGk"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":11,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"What is a Dask Array?","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"qciwqqWZAN"}],"key":"tpljhAo1Zt"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Basic concepts and features of Dask Arrays","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"vR3MSYLntL"}],"key":"mFKkhLf1Gm"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Working with Dask arrays","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"rbF2kNmgp2"}],"key":"XGNoguTQER"}],"key":"tPOs3UPDzQ"},{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"strong","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Related Dask Array Documentation","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"xz8SGZ8Z9b"}],"key":"FPHehZo1I0"}],"key":"FLuQ0cHroB"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":17,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"link","url":"https://docs.dask.org/en/stable/array.html","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Dask Array documentation","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"DzZejCf4qe"}],"urlSource":"https://docs.dask.org/en/stable/array.html","key":"K8z2FlCxPb"}],"key":"Xf2fyKOVaq"},{"type":"listItem","spread":true,"position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"link","url":"https://docs.dask.org/en/stable/array-api.html","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Dask Array API","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"d50JxwTFqj"}],"urlSource":"https://docs.dask.org/en/stable/array-api.html","key":"xk12qXCrTK"}],"key":"aNrzaoMNoW"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"link","url":"https://examples.dask.org/array.html","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Dask Array examples","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"RAnGMrOXtO"}],"urlSource":"https://examples.dask.org/array.html","key":"R1Cmkp7qoz"}],"key":"UIG71SJRuj"}],"key":"cBWLSGhXSq"},{"type":"heading","depth":2,"position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"Dask Arrays","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"g9p3m5ufLs"}],"identifier":"dask-arrays","label":"Dask Arrays","html_id":"dask-arrays","implicit":true,"key":"GUUlhkwig1"},{"type":"paragraph","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"Dask Arrays are basically parallelized version of NumPy arrays for processing ","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"wk9sAulLlW"},{"type":"emphasis","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"larger-than-memory data sets","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"mjQQITXXN7"}],"key":"hmWurNtEwk"},{"type":"text","value":".","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"z3I9fpRS4R"}],"key":"ayWdZSp8Io"},{"type":"image","style":{"horizontalAlign":"middle"},"url":"/dask-cookbook/build/037e4310c3913e72533173c453c9e52f.svg","width":"500px","key":"DvKGP15uF5","urlSource":"https://docs.dask.org/en/stable/_images/dask-array.svg"},{"type":"paragraph","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"Image credit: Dask Contributors","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"vgLzFYk0sC"}],"key":"zRv9XanlR6"}],"key":"MzNsIkMwos"},{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Dask Array can be used as a drop-in replacement for NumPy arrays, with a similar API and support for a subset of NumPy functions.","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"O5oPRUfPje"}],"key":"xhClBc5CKV"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"Dask effectively reduces the memory footprint of large array computations by dividing the arrays into smaller pieces (called ","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"OMG5DBfFaN"},{"type":"strong","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"chunks","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"kWjYs8aBkK"}],"key":"hgLFrcjtpK"},{"type":"text","value":") that can fit into memory and stream the data from disk.","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"K1wlUuqW50"}],"key":"uyKLOAHYMD"}],"visibility":"show","key":"EufnX1Kkoh"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Dask Arrays are lazy:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"b7gphuBVpo"}],"key":"iOH0o25Aeg"},{"type":"text","value":" Unlike Numpy, operations on Dask arrays are not computed until you explicitly request them.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GZGwBmREq6"}],"key":"RzMZu26HHr"},{"type":"div","class":"alert alert-success","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Lazy Evaluation: objects are evaluated just in time when the results are needed!","key":"yAEWQ6beFl"}],"key":"EhLnEZYsWT"}],"key":"Spf5coxWS6"},{"type":"paragraph","children":[{"type":"text","value":"Lazy evaluation help us avoid having large pieces of memory resident on the workers and optimize the resource requirements.","key":"pk6dyENGmV"}],"key":"XOXB493C1u"}],"key":"qgBjM9ysvk"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Dask Arrays don’t directly hold any data. Instead, they provide ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"RU5VCdWeuD"},{"type":"strong","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"a symbolic representation of the necessary computations","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"YASEE3ZQOK"}],"key":"vdLydrGBzX"},{"type":"text","value":" to generate the data. We will explain this more below.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"FPat0Fv4db"}],"key":"ZuvtMUJNCP"},{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Let’s start exploring Dask Arrays:","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"lxT2ONaFVs"}],"key":"WohoifJLFX"}],"key":"gFgScdEleJ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Setup: Start a Dask Client","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TLs4pKnoC5"}],"identifier":"setup-start-a-dask-client","label":"Setup: Start a Dask Client","html_id":"setup-start-a-dask-client","implicit":true,"key":"ajkTg3WMO9"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We will talk in-depth about Dask Cluster and Dask Clients later in this tutorial. Here we just created a local cluster and attached a client to it.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"zjX2i5VNqN"}],"key":"v2sEB5tiMc"}],"key":"YvyvUE9wnr"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dask.distributed import Client\n\nclient = Client()\nclient","visibility":"show","key":"IchZZfpxNY"},{"type":"output","id":"VuL7K_KvuJ5R67go6iAbi","data":[{"output_type":"execute_result","execution_count":1,"metadata":{},"data":{"text/plain":{"content":"<Client: 'tcp://127.0.0.1:42525' processes=4 threads=4, memory=15.62 GiB>","content_type":"text/plain"},"text/html":{"content":"<div>\n    <div style=\"width: 24px; height: 24px; background-color: #e1e1e1; border: 3px solid #9D9D9D; border-radius: 5px; position: absolute;\"> </div>\n    <div style=\"margin-left: 48px;\">\n        <h3 style=\"margin-bottom: 0px;\">Client</h3>\n        <p style=\"color: #9D9D9D; margin-bottom: 0px;\">Client-47406823-7656-11f0-8f54-7ced8d2ac1b6</p>\n        <table style=\"width: 100%; text-align: left;\">\n\n        <tr>\n        \n            <td style=\"text-align: left;\"><strong>Connection method:</strong> Cluster object</td>\n            <td style=\"text-align: left;\"><strong>Cluster type:</strong> distributed.LocalCluster</td>\n        \n        </tr>\n\n        \n            <tr>\n                <td style=\"text-align: left;\">\n                    <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:8787/status\" target=\"_blank\">http://127.0.0.1:8787/status</a>\n                </td>\n                <td style=\"text-align: left;\"></td>\n            </tr>\n        \n\n        </table>\n\n        \n            <button style=\"margin-bottom: 12px;\" data-commandlinker-command=\"dask:populate-and-launch-layout\" data-commandlinker-args='{\"url\": \"http://127.0.0.1:8787/status\" }'>\n                Launch dashboard in JupyterLab\n            </button>\n        \n\n        \n            <details>\n            <summary style=\"margin-bottom: 20px;\"><h3 style=\"display: inline;\">Cluster Info</h3></summary>\n            <div class=\"jp-RenderedHTMLCommon jp-RenderedHTML jp-mod-trusted jp-OutputArea-output\">\n    <div style=\"width: 24px; height: 24px; background-color: #e1e1e1; border: 3px solid #9D9D9D; border-radius: 5px; position: absolute;\">\n    </div>\n    <div style=\"margin-left: 48px;\">\n        <h3 style=\"margin-bottom: 0px; margin-top: 0px;\">LocalCluster</h3>\n        <p style=\"color: #9D9D9D; margin-bottom: 0px;\">a004f436</p>\n        <table style=\"width: 100%; text-align: left;\">\n            <tr>\n                <td style=\"text-align: left;\">\n                    <strong>Dashboard:</strong> <a href=\"http://127.0.0.1:8787/status\" target=\"_blank\">http://127.0.0.1:8787/status</a>\n                </td>\n                <td style=\"text-align: left;\">\n                    <strong>Workers:</strong> 4\n                </td>\n            </tr>\n            <tr>\n                <td style=\"text-align: left;\">\n                    <strong>Total threads:</strong> 4\n                </td>\n                <td style=\"text-align: left;\">\n                    <strong>Total memory:</strong> 15.62 GiB\n                </td>\n            </tr>\n            \n            <tr>\n    <td style=\"text-align: left;\"><strong>Status:</strong> running</td>\n    <td style=\"text-align: left;\"><strong>Using processes:</strong> True</td>\n</tr>\n\n            \n        </table>\n\n        <details>\n            <summary style=\"margin-bottom: 20px;\">\n                <h3 style=\"display: inline;\">Scheduler Info</h3>\n            </summary>\n\n            <div style=\"\">\n    <div>\n        <div style=\"width: 24px; height: 24px; background-color: #FFF7E5; border: 3px solid #FF6132; border-radius: 5px; position: absolute;\"> </div>\n        <div style=\"margin-left: 48px;\">\n            <h3 style=\"margin-bottom: 0px;\">Scheduler</h3>\n            <p style=\"color: #9D9D9D; margin-bottom: 0px;\">Scheduler-94bf8d2a-07dd-4d80-baa2-0d3e4e75ef30</p>\n            <table style=\"width: 100%; text-align: left;\">\n                <tr>\n                    <td style=\"text-align: left;\">\n                        <strong>Comm:</strong> tcp://127.0.0.1:42525\n                    </td>\n                    <td style=\"text-align: left;\">\n                        <strong>Workers:</strong> 0 \n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"text-align: left;\">\n                        <strong>Dashboard:</strong> <a href=\"http://127.0.0.1:8787/status\" target=\"_blank\">http://127.0.0.1:8787/status</a>\n                    </td>\n                    <td style=\"text-align: left;\">\n                        <strong>Total threads:</strong> 0\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"text-align: left;\">\n                        <strong>Started:</strong> Just now\n                    </td>\n                    <td style=\"text-align: left;\">\n                        <strong>Total memory:</strong> 0 B\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n\n    <details style=\"margin-left: 48px;\">\n        <summary style=\"margin-bottom: 20px;\">\n            <h3 style=\"display: inline;\">Workers</h3>\n        </summary>\n\n        \n        <div style=\"margin-bottom: 20px;\">\n            <div style=\"width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;\"> </div>\n            <div style=\"margin-left: 48px;\">\n            <details>\n                <summary>\n                    <h4 style=\"margin-bottom: 0px; display: inline;\">Worker: 0</h4>\n                </summary>\n                <table style=\"width: 100%; text-align: left;\">\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Comm: </strong> tcp://127.0.0.1:35841\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Total threads: </strong> 1\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:44251/status\" target=\"_blank\">http://127.0.0.1:44251/status</a>\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Memory: </strong> 3.91 GiB\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Nanny: </strong> tcp://127.0.0.1:33517\n                        </td>\n                        <td style=\"text-align: left;\"></td>\n                    </tr>\n                    <tr>\n                        <td colspan=\"2\" style=\"text-align: left;\">\n                            <strong>Local directory: </strong> /tmp/dask-scratch-space/worker-i9p0jtxq\n                        </td>\n                    </tr>\n\n                    \n\n                    \n\n                </table>\n            </details>\n            </div>\n        </div>\n        \n        <div style=\"margin-bottom: 20px;\">\n            <div style=\"width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;\"> </div>\n            <div style=\"margin-left: 48px;\">\n            <details>\n                <summary>\n                    <h4 style=\"margin-bottom: 0px; display: inline;\">Worker: 1</h4>\n                </summary>\n                <table style=\"width: 100%; text-align: left;\">\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Comm: </strong> tcp://127.0.0.1:46751\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Total threads: </strong> 1\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:44097/status\" target=\"_blank\">http://127.0.0.1:44097/status</a>\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Memory: </strong> 3.91 GiB\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Nanny: </strong> tcp://127.0.0.1:36051\n                        </td>\n                        <td style=\"text-align: left;\"></td>\n                    </tr>\n                    <tr>\n                        <td colspan=\"2\" style=\"text-align: left;\">\n                            <strong>Local directory: </strong> /tmp/dask-scratch-space/worker-rfm2f9kp\n                        </td>\n                    </tr>\n\n                    \n\n                    \n\n                </table>\n            </details>\n            </div>\n        </div>\n        \n        <div style=\"margin-bottom: 20px;\">\n            <div style=\"width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;\"> </div>\n            <div style=\"margin-left: 48px;\">\n            <details>\n                <summary>\n                    <h4 style=\"margin-bottom: 0px; display: inline;\">Worker: 2</h4>\n                </summary>\n                <table style=\"width: 100%; text-align: left;\">\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Comm: </strong> tcp://127.0.0.1:41483\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Total threads: </strong> 1\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:41827/status\" target=\"_blank\">http://127.0.0.1:41827/status</a>\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Memory: </strong> 3.91 GiB\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Nanny: </strong> tcp://127.0.0.1:34547\n                        </td>\n                        <td style=\"text-align: left;\"></td>\n                    </tr>\n                    <tr>\n                        <td colspan=\"2\" style=\"text-align: left;\">\n                            <strong>Local directory: </strong> /tmp/dask-scratch-space/worker-_32deyua\n                        </td>\n                    </tr>\n\n                    \n\n                    \n\n                </table>\n            </details>\n            </div>\n        </div>\n        \n        <div style=\"margin-bottom: 20px;\">\n            <div style=\"width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;\"> </div>\n            <div style=\"margin-left: 48px;\">\n            <details>\n                <summary>\n                    <h4 style=\"margin-bottom: 0px; display: inline;\">Worker: 3</h4>\n                </summary>\n                <table style=\"width: 100%; text-align: left;\">\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Comm: </strong> tcp://127.0.0.1:41891\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Total threads: </strong> 1\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:39263/status\" target=\"_blank\">http://127.0.0.1:39263/status</a>\n                        </td>\n                        <td style=\"text-align: left;\">\n                            <strong>Memory: </strong> 3.91 GiB\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: left;\">\n                            <strong>Nanny: </strong> tcp://127.0.0.1:33995\n                        </td>\n                        <td style=\"text-align: left;\"></td>\n                    </tr>\n                    <tr>\n                        <td colspan=\"2\" style=\"text-align: left;\">\n                            <strong>Local directory: </strong> /tmp/dask-scratch-space/worker-8e32y5gw\n                        </td>\n                    </tr>\n\n                    \n\n                    \n\n                </table>\n            </details>\n            </div>\n        </div>\n        \n\n    </details>\n</div>\n\n        </details>\n    </div>\n</div>\n            </details>\n        \n\n    </div>\n</div>","content_type":"text/html"}}}],"visibility":"show","key":"lxQbXWmAoY"}],"visibility":"show","key":"oZ6EwpjsEr"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Blocked Algorithms","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rk7OWnITmv"}],"identifier":"blocked-algorithms","label":"Blocked Algorithms","html_id":"blocked-algorithms","implicit":true,"key":"GiLmFVQIWE"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Dask Arrays use blocked algorithms to split large computations into smaller computations which operate on subsets of the data (called ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ONg3i4ZdgQ"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"chunks","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UlY9rRCDIh"}],"key":"JcwEWe3Ubz"},{"type":"text","value":").","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"H4C9gEoZT4"}],"key":"klvz7zrOIZ"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Let’s see what this means in an example:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ytHGbCrCN4"}],"key":"wXNzw392Ui"}],"key":"xY299YRA0T"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import numpy as np\nimport dask.array as da\n\n# A 4x4 numpy array that goes from 1 to 16 \n\nnarr = np.array([\n        [ 1,  2,  3,  4],\n        [ 5,  6,  7,  8],\n        [ 9, 10, 11, 12],\n        [13, 14, 15, 16]\n        ])\n\n# -- convert numpy array to dask array with 4 chunks\ndarr = da.from_array( narr,chunks=(2, 2))","key":"sZOlmJjydi"},{"type":"output","id":"KF857bujT3pTbLQ6UXzzk","data":[],"key":"cIN2kCXl7p"}],"key":"a8z2NzAWYV"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we can calculate the sum of this array using ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VCvbGRMhlJ"},{"type":"inlineCode","value":"darr.sum()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CFgI1SRahC"},{"type":"text","value":" similar to numpy. ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"neynRdlyPM"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"But how is it different from numpy?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xWzGBynysM"}],"key":"gpZIDPNykm"}],"key":"JExXF7YXAL"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"When you take the sum of the Dask array, Dask first takes the sum of each chunk and only after each of those is completed, takes the sum of the results from each chunk.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"UiUu4fQUIE"}],"key":"RIgzTwTlfW"},{"type":"image","url":"/dask-cookbook/build/d87210c07d7d63200bb1e0c6b85b4038.jpeg","width":"500px","key":"IZSjSiyT1e","urlSource":"https://d33wubrfki0l68.cloudfront.net/f7bf6ca40c8f217386f83795b36e0c964c6a9d2b/ad6da/images/blog/what-is-dask-blockwise-sum.jpg"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Image adapted from ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"ifq9D0UVNp"},{"type":"link","url":"http://saturncloud.io","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"saturncloud.io","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"y8qOXlbGAh"}],"urlSource":"http://saturncloud.io","key":"o3qaw0bK89"}],"key":"S0U4bBq8mn"}],"key":"DFjMwscB3k"}],"key":"woDkmzkSew"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Task Graph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SX8JhZL3w7"}],"identifier":"task-graph","label":"Task Graph","html_id":"task-graph","implicit":true,"key":"iM48Q5TWLz"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The Dask Task Graph serves as a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HkvY7iT2jj"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"blueprint","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hW6zFuHBq9"}],"key":"ZfST2kYJ01"},{"type":"text","value":" for executing the computations.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"biiC3dGkc1"}],"key":"VMO6aDqZfU"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The Task Graph defines the (1) relationships between tasks, and (2) the order in which they should be executed.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"rxFMOotKIg"}],"key":"dUpVGVKZIL"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"In a task graph each node in the graph represents a task and lines represent the dependencies/relationships between tasks.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"wbEHLe8vuE"}],"key":"PjqWgeIjiD"}],"key":"NB0ATU2wC9"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can visualize the low-level task graph using ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"keQqYKV9LS"},{"type":"inlineCode","value":".visualize()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GCuF1QEgF1"},{"type":"text","value":" method.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cz7uMNeZ8w"}],"key":"ranLjhLGDv"}],"key":"DitiYB9k7E"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"darr.sum().visualize(rankdir=\"LR\")","key":"Qeup20Ojb4"},{"type":"output","id":"Z2JmZZtIXNzM7rssIMaQz","data":[{"output_type":"execute_result","execution_count":3,"metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"34fdd51e21f22450d2ee037dd1216709","path":"/dask-cookbook/build/34fdd51e21f22450d2ee037dd1216709.png"},"text/plain":{"content":"<IPython.core.display.Image object>","content_type":"text/plain"}}}],"key":"RTyuBeYPaP"}],"key":"ZN5dyMPhGT"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"It is generally good practice to look at the task graph before executing the computation. By looking at the task graph, you can learn about potential bottlenecks where parallelism is not possible.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FIcOXcCzz6"}],"key":"Ae8YyOJPAo"},{"type":"div","class":"alert alert-block alert-info","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"TIP:","key":"maEKyFuz0f"}],"key":"wqE6EKnDPQ"},{"type":"text","value":" For big computations, low-level task graphs gets very confusing. An alternative that provides a more concise graph is using ","key":"J4DK9s95I4"},{"type":"inlineCode","value":".dask.visualize()","key":"wSulY4Op98"},{"type":"text","value":".","key":"jHaUY6sPwr"}],"key":"timrEoJKTO"}],"key":"S5KycuYsOC"}],"key":"EpR6ir5tmP"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#darr.sum().dask.visualize()","key":"V1qOgo6j8H"},{"type":"output","id":"u7z0bWmrd5ZKLCSmk2XNX","data":[],"key":"DGmaqmhMav"}],"key":"RYyaVl7qTp"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"S1ZmFrIrSs"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Now, let’s start with another example. Here we create a 2D array of ones using NumPy.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"bJ1ifH7PrX"}],"key":"yIrGjMQxmd"}],"key":"MSoix99FFL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"shape = (10000,12000)\n\nones_np = np.ones(shape)\nones_np","key":"D0ybDsjB48"},{"type":"output","id":"OYFSR9plp5I38OX3htIH2","data":[{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"text/plain":{"content":"array([[1., 1., 1., ..., 1., 1., 1.],\n       [1., 1., 1., ..., 1., 1., 1.],\n       [1., 1., 1., ..., 1., 1., 1.],\n       ...,\n       [1., 1., 1., ..., 1., 1., 1.],\n       [1., 1., 1., ..., 1., 1., 1.],\n       [1., 1., 1., ..., 1., 1., 1.]], shape=(10000, 12000))","content_type":"text/plain"}}}],"key":"JI5Fbm44bN"}],"key":"MlXKZOtC2H"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now, let’s create the same array using Dask:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nxZAm2IuSg"}],"key":"qFjZnhovTV"}],"key":"cZOtuQ3rDi"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ones_da = da.ones(shape)\nones_da","key":"g2pTRPNcSt"},{"type":"output","id":"az-tWscb6X7HYcOJ5xv6U","data":[{"output_type":"execute_result","execution_count":6,"metadata":{},"data":{"text/plain":{"content":"dask.array<ones_like, shape=(10000, 12000), dtype=float64, chunksize=(4096, 4096), chunktype=numpy.ndarray>","content_type":"text/plain"},"text/html":{"content":"<table>\n    <tr>\n        <td>\n            <table style=\"border-collapse: collapse;\">\n                <thead>\n                    <tr>\n                        <td> </td>\n                        <th> Array </th>\n                        <th> Chunk </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    \n                    <tr>\n                        <th> Bytes </th>\n                        <td> 915.53 MiB </td>\n                        <td> 128.00 MiB </td>\n                    </tr>\n                    \n                    <tr>\n                        <th> Shape </th>\n                        <td> (10000, 12000) </td>\n                        <td> (4096, 4096) </td>\n                    </tr>\n                    <tr>\n                        <th> Dask graph </th>\n                        <td colspan=\"2\"> 9 chunks in 1 graph layer </td>\n                    </tr>\n                    <tr>\n                        <th> Data type </th>\n                        <td colspan=\"2\"> float64 numpy.ndarray </td>\n                    </tr>\n                </tbody>\n            </table>\n        </td>\n        <td>\n        <svg width=\"170\" height=\"150\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n\n  <!-- Horizontal lines -->\n  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n  <line x1=\"0\" y1=\"40\" x2=\"120\" y2=\"40\" />\n  <line x1=\"0\" y1=\"81\" x2=\"120\" y2=\"81\" />\n  <line x1=\"0\" y1=\"100\" x2=\"120\" y2=\"100\" style=\"stroke-width:2\" />\n\n  <!-- Vertical lines -->\n  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"100\" style=\"stroke-width:2\" />\n  <line x1=\"40\" y1=\"0\" x2=\"40\" y2=\"100\" />\n  <line x1=\"81\" y1=\"0\" x2=\"81\" y2=\"100\" />\n  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"100\" style=\"stroke-width:2\" />\n\n  <!-- Colored Rectangle -->\n  <polygon points=\"0.0,0.0 120.0,0.0 120.0,100.0 0.0,100.0\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n\n  <!-- Text -->\n  <text x=\"60.000000\" y=\"120.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >12000</text>\n  <text x=\"140.000000\" y=\"50.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,140.000000,50.000000)\">10000</text>\n</svg>\n        </td>\n    </tr>\n</table>","content_type":"text/html"}}}],"key":"OOfyVR6YfZ"}],"key":"bvtfUa4D3M"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We see a Dask Array representation of the data.\nThis is a symbolic representation; no data has actually been generated yet.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EhtGuOSJPr"}],"key":"XG50C0IClk"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"As we discussed previously, this mode of operation is called “lazy”.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"hTNHIYpjid"}],"key":"cDsTDPoBAC"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"This allows the user to build up a series of computations or tasks before being passed to the scheduler for execution.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"O5bIS9JebJ"}],"key":"ikyePsVwBI"}],"key":"wR8klvmbDp"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Chunks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pVIrfkbHdV"}],"identifier":"chunks","label":"Chunks","html_id":"chunks","implicit":true,"key":"sjVFY4224M"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"When checking the Dask array, the symbolic representation illustrates the concept of chunks. Dask arrays split the data into ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"CMvrHOOIaD"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"sub-arrays","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JDTnddioTM"}],"key":"IEB9rCOdFx"},{"type":"text","value":" (or ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"f6M9mYxlxw"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"chunks","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vKosuPMLx8"}],"key":"irfdYDxT7e"},{"type":"text","value":") to optimize computation with large arrays.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UsTJcFGffm"}],"key":"LFqeP5nHeu"}],"key":"CZjveAtCkB"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Chunking an array","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PWlJYIGwlO"}],"identifier":"chunking-an-array","label":"Chunking an array","html_id":"chunking-an-array","implicit":true,"key":"WaJLe1puJq"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The way that arrays are chunked can significantly affect total performance.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hpwSngBy8w"}],"key":"PMwXvkTDPw"}],"key":"yCbW2L9O7S"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"For specifying the chunking of an array, we use the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ciIMZHFuEO"},{"type":"inlineCode","value":"chunks","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"khZEVSerat"},{"type":"text","value":" argument when creating our ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YYWuIIWA9o"},{"type":"inlineCode","value":"dask.array","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"OwE3ssPGaI"},{"type":"text","value":".","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"DxPA4VgToQ"}],"key":"m09I7sGUET"},{"type":"div","class":"alert alert-block alert-warning","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"⚠️ WARNING:","key":"x1vkQqgqiH"}],"key":"uGnPHayBr4"},{"type":"text","value":" Please note that ","key":"MOtDGc4Fv1"},{"type":"inlineCode","value":"chunks","key":"JtwqNVGzMs"},{"type":"text","value":" argument stands for ","key":"EK7t5GdaUD"},{"type":"strong","children":[{"type":"text","value":"chunk shape","key":"L5igzqkIvL"}],"key":"Y1NiPyovB1"},{"type":"text","value":" rather than “number of chunks”.","key":"Adag7dq6Bw"},{"type":"break","key":"QX1hDmBIDG"},{"type":"text","value":" For example, ","key":"YqknBOsFea"},{"type":"inlineCode","value":"chunks=1","key":"i0JLwsXEwC"},{"type":"text","value":" means that you will have several chunks with one element.","key":"WdDedVqsOe"}],"key":"LET0y28g2H"}],"key":"XwFQlSOGXN"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"There are several ways to define ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"BRRhYM14os"},{"type":"inlineCode","value":"chunks","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"BiKT6ADGGx"},{"type":"text","value":". For example:","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"LmBUm6DPVy"}],"key":"cHPuDqhCW9"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":15,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"A uniform dimension size like 1000, meaning chunks of size 1000 in each dimension.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"Pbh24pMb0Q"}],"key":"qDZ7rUEwog"}],"key":"pMpPmAFi0d"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"A uniform chunk shape like ","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"wgEoOvPM0r"},{"type":"inlineCode","value":"(1000, 2000, 3000)","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"geaHmBhGPV"},{"type":"text","value":", meaning chunks of size 1000 in the first axis, 2000 in the second axis, and 3000 in the third.","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"J1CB7NNNwV"}],"key":"Vh3qS2keIq"}],"key":"Z63Q297Ntb"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Fully explicit sizes of all blocks for all dimensions, like ","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"OVg8MLuBcR"},{"type":"inlineCode","value":"((1000, 1000, 500), (400, 400), (5, 5, 5, 5, 5))","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"ZGtfi7GqRJ"}],"key":"lutO0zvot3"}],"key":"WWCNvLQ1OV"},{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"A dictionary specifying chunk size per dimension like ","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"Gz5plIqOZd"},{"type":"inlineCode","value":"{0: 1000, 1: 2000, 2: 3000}","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"kRQGZKc1gz"},{"type":"text","value":".","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"eUSUR2AKgz"}],"key":"LRWWADYu74"}],"key":"sWI8qAIx79"}],"key":"qzPjbvFmTv"},{"type":"paragraph","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Let’s recreate the above Dask array, but this time we will specify chunk sizes (a.k.a. shapes) using the argument ","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"qOl3dK5cqE"},{"type":"inlineCode","value":"chunks","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"D9zP2R5nNI"},{"type":"text","value":".","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"CIfKIKYu1r"}],"key":"GRgmJ0S3zW"}],"key":"uYvWU6AUGM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# -- remember what the shape of our data array was\nshape","key":"W7GrdqyiWw"},{"type":"output","id":"GodzxxRe_PB_QxVl24EiF","data":[{"output_type":"execute_result","execution_count":7,"metadata":{},"data":{"text/plain":{"content":"(10000, 12000)","content_type":"text/plain"}}}],"key":"XIHzezAFna"}],"key":"glis0hFK7T"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# create a dask array with 6 chunks\nchunk_shape = (5000,4000)\nones_da = da.ones(shape,chunks=chunk_shape)\nones_da","key":"vX2wwlZNqy"},{"type":"output","id":"9gfy17ENrEgcwYeeQTVoO","data":[{"output_type":"execute_result","execution_count":8,"metadata":{},"data":{"text/plain":{"content":"dask.array<ones_like, shape=(10000, 12000), dtype=float64, chunksize=(5000, 4000), chunktype=numpy.ndarray>","content_type":"text/plain"},"text/html":{"content":"<table>\n    <tr>\n        <td>\n            <table style=\"border-collapse: collapse;\">\n                <thead>\n                    <tr>\n                        <td> </td>\n                        <th> Array </th>\n                        <th> Chunk </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    \n                    <tr>\n                        <th> Bytes </th>\n                        <td> 915.53 MiB </td>\n                        <td> 152.59 MiB </td>\n                    </tr>\n                    \n                    <tr>\n                        <th> Shape </th>\n                        <td> (10000, 12000) </td>\n                        <td> (5000, 4000) </td>\n                    </tr>\n                    <tr>\n                        <th> Dask graph </th>\n                        <td colspan=\"2\"> 6 chunks in 1 graph layer </td>\n                    </tr>\n                    <tr>\n                        <th> Data type </th>\n                        <td colspan=\"2\"> float64 numpy.ndarray </td>\n                    </tr>\n                </tbody>\n            </table>\n        </td>\n        <td>\n        <svg width=\"170\" height=\"150\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n\n  <!-- Horizontal lines -->\n  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n  <line x1=\"0\" y1=\"50\" x2=\"120\" y2=\"50\" />\n  <line x1=\"0\" y1=\"100\" x2=\"120\" y2=\"100\" style=\"stroke-width:2\" />\n\n  <!-- Vertical lines -->\n  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"100\" style=\"stroke-width:2\" />\n  <line x1=\"40\" y1=\"0\" x2=\"40\" y2=\"100\" />\n  <line x1=\"80\" y1=\"0\" x2=\"80\" y2=\"100\" />\n  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"100\" style=\"stroke-width:2\" />\n\n  <!-- Colored Rectangle -->\n  <polygon points=\"0.0,0.0 120.0,0.0 120.0,100.0 0.0,100.0\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n\n  <!-- Text -->\n  <text x=\"60.000000\" y=\"120.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >12000</text>\n  <text x=\"140.000000\" y=\"50.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,140.000000,50.000000)\">10000</text>\n</svg>\n        </td>\n    </tr>\n</table>","content_type":"text/html"}}}],"key":"MZiFzFvOS1"}],"key":"LxfKQGiq9u"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"You can see in the above dask array representation that we now have 6 chunks, each of shape (5000,4000) and size of ~ 160.0 MiB.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oGnAvza9eP"}],"key":"CxbcaUtmCD"}],"key":"F3pZMerusB"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Performance Comparison","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Sd4K9k8Zam"}],"identifier":"performance-comparison","label":"Performance Comparison","html_id":"performance-comparison","implicit":true,"key":"Cy4a0NuE8V"}],"key":"qA2poXEbFQ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"To compare the performance between a NumPy array and an equivalent Dask array, let’s calculate the mean.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pcOofwwOKN"}],"key":"kQZstxOTZ4"}],"key":"vh74jGjZ2W"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n# The %%time cell magic measures the execution time of the whole cell\nones_np.mean()","key":"mn6jK2Vy99"},{"type":"output","id":"RlZ8ooCuf9G4bgCJ1vcBH","data":[{"output_type":"stream","name":"stdout","text":"CPU times: user 58.5 ms, sys: 962 μs, total: 59.4 ms\nWall time: 57.9 ms\n"},{"output_type":"execute_result","execution_count":9,"metadata":{},"data":{"text/plain":{"content":"np.float64(1.0)","content_type":"text/plain"}}}],"key":"iaPPI4yRpP"}],"key":"jCLvtjitIE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n# Remember, we are not doing any computation here, just constructing our task graph\nmean_of_ones_da = ones_da.mean()","key":"JyHc6ljIHE"},{"type":"output","id":"pceg4LAYCLPeykcHFKJTK","data":[{"output_type":"stream","name":"stdout","text":"CPU times: user 1.51 ms, sys: 0 ns, total: 1.51 ms\nWall time: 1.58 ms\n"}],"key":"sSfT7lwFxp"}],"key":"OEFSj7dqdO"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Remember :","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"msssF4GkqC"}],"key":"l7fFvsI76w"},{"type":"blockquote","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Dask doesn’t do anything until you tell it... It is lazy!","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"VzHIVOLdnW"}],"key":"QKmljMAHUK"}],"key":"bbZaBeN9tD"}],"key":"MOV7Ag24NF"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"So far we have just constructed our task graph but no computations yet!","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"TDMLwECOjY"}],"key":"j52cHoE4Q1"},{"type":"div","class":"alert alert-success","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"NOTE:","key":"LNGuYYYyE5"}],"key":"b2XO6FTAkz"},{"type":"text","value":" In order to generate the data, we need to call the ","key":"Oetb2N92D2"},{"type":"inlineCode","value":".compute()","key":"eq2THulBPf"},{"type":"text","value":" method on the Dask Array to trigger our computation.","key":"p4Hx1oOmes"}],"key":"a0QUcI4mVZ"}],"key":"jLv1qUNtFA"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Let’s run the ","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"y3A1q3CX3C"},{"type":"inlineCode","value":".compute()","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"OXz4IoXXme"},{"type":"text","value":" method to see how this works:","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"rwb2AQ2A1u"}],"key":"TPCga30Gck"}],"key":"avboxp6LNa"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\nmean_of_ones_da.compute()","key":"Uf4ihGrLOc"},{"type":"output","id":"Riud9eZYRFM9C8wOS29Tl","data":[{"output_type":"stream","name":"stdout","text":"CPU times: user 61.1 ms, sys: 9.93 ms, total: 71 ms\nWall time: 1.22 s\n"},{"output_type":"execute_result","execution_count":11,"metadata":{},"data":{"text/plain":{"content":"np.float64(1.0)","content_type":"text/plain"}}}],"key":"fWGrMLi5l1"}],"key":"AI3xNOiDel"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"inlineCode","value":".compute()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LaAL5EyQxE"},{"type":"text","value":" method convertes Dask Arrays to Numpy Arrays. Let’s check to see if this is true:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vr03LXkugR"}],"key":"OMdn9mSnar"}],"key":"cGbqRKEKN7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"type (ones_da.compute())","key":"PBC5kTeAlw"},{"type":"output","id":"brR01e5cmHIET88hA34tf","data":[{"output_type":"execute_result","execution_count":12,"metadata":{},"data":{"text/plain":{"content":"numpy.ndarray","content_type":"text/plain"}}}],"key":"UkGSofZFg7"}],"key":"bSdoWHxaoV"},{"type":"block","kind":"notebook-content","children":[{"type":"div","class":"alert alert-block alert-warning","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"WARNING:","key":"rbmZcJh41W"}],"key":"BSg4IDtvCy"},{"type":"text","value":" Typically, when working with Dask arrays, we do not want to generate the data right away by calling ","key":"ZHw89J7wbu"},{"type":"inlineCode","value":".compute()","key":"D4Rgxv5TlN"},{"type":"text","value":" on a large array.","key":"IM4MfX9Fwh"}],"key":"JOCPcxJSUr"}],"key":"hjxgjlscnz"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"We usually want to perform some computations that reduce the data size. For example, we might compute statistics like the mean or standard deviation.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"g73NcfPboy"}],"key":"jJdA9wFZiw"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Let’s look at an example of taking the mean and visualize the task graph. Remember, that no actual computation is taking place until we call ","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"T0nodAvSoO"},{"type":"inlineCode","value":".compute()","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"eHULHDR3Fr"},{"type":"text","value":".","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"xhURq07ilm"}],"key":"xC4eGryKUc"}],"key":"THSBxEn8cz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"mean_of_ones_da = ones_da.mean()\nmean_of_ones_da.visualize(rankdir=\"LR\")","key":"KrT5GcmOP4"},{"type":"output","id":"eX1tfoQNtOpRFrptb_6qN","data":[{"output_type":"execute_result","execution_count":13,"metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"ff1a7960b95f58c9d001f07f6e8250aa","path":"/dask-cookbook/build/ff1a7960b95f58c9d001f07f6e8250aa.png"},"text/plain":{"content":"<IPython.core.display.Image object>","content_type":"text/plain"}}}],"key":"IYIfqX2NBF"}],"key":"PAuD74tFin"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FKO4NBwjYI"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"What are the sizes of these arrays in memory?","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"aoVplpyYTa"}],"key":"C0bbhpv7oD"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"First, let’s define a function that returns array size in MiB.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"x4gzpS2gmT"}],"key":"Fkrcgg70hX"}],"key":"BLg768WIu3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import sys\n\n# Define function to display variable size in MiB\ndef var_size(in_var):\n    result = sys.getsizeof(in_var) / 1024/1024\n    return (result)","key":"Oi6kz74dca"},{"type":"output","id":"dDACQt39YNrqJ3ywJkkys","data":[],"key":"wXJYGUpljb"}],"key":"OkfynnN5Bp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(\"Shape of the numpy array : \", ones_np.shape) \nprint(\"Shape of the dask array  : \", ones_da.shape) \n\n# memory size of numpy array in MiB\nprint(f\"Memory size of numpy array in MB : {var_size(ones_np):.2f} MiB\")\n# memory size of dask array in MiB\nprint(f\"Memory size of dask array in MB  : {var_size(ones_da):.2f} MiB\")","key":"dbYqMCJkAf"},{"type":"output","id":"qNEAV3GoBepNdAZvA1v3Z","data":[{"output_type":"stream","name":"stdout","text":"Shape of the numpy array :  (10000, 12000)\nShape of the dask array  :  (10000, 12000)\nMemory size of numpy array in MB : 915.53 MiB\nMemory size of dask array in MB  : 0.00 MiB\n"}],"key":"luELxhcytE"}],"key":"dFrndbVBmH"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Why memory size for the above Dask array is zero?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"x7wOILnZlp"}],"key":"Px4cwoiN25"}],"key":"AWTl7fesky"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Remember, this variable is only a graph representation of the full array which will be split across workers.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rZfx2dTf8J"}],"key":"WZW2LH3A8D"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"However, Dask does give us ways to see the full size of the data (often much larger than your client machine can handle)!","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"uPSsBv4JWN"}],"key":"htUo9CNxau"}],"key":"O4gKvlqCV2"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(\"Size of Dask dataset:  {:.2f} MiB\".format(ones_da.nbytes / 1024/1024))","key":"pynaGcQrIz"},{"type":"output","id":"ux2cm4xC7lSvUZII0w7r_","data":[{"output_type":"stream","name":"stdout","text":"Size of Dask dataset:  915.53 MiB\n"}],"key":"NsBOGzo4fo"}],"key":"mfkLd5CgB3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Larger Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RTIa11049x"}],"identifier":"larger-data","label":"Larger Data","html_id":"larger-data","implicit":true,"key":"PgGwtPjyIp"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The previous example illustrated how Dask works, but using Dask is not really necessary (nor advisable) for an array of size 915.53 MiB.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"I7RneHodIw"},{"type":"break","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"lTwaaBO0PT"},{"type":"text","value":"Let’s try an example using bigger data and bigger calculations:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"at0JOKSktW"}],"key":"bYmNvB4M7a"}],"key":"E2eBGI82xj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"big_shape = (2000, 200, 2000)\n\n# -- this will make a big numpy array that might not fit on your machine\n#big_np = np.ones(big_shape)","key":"fHmQg4ZowM"},{"type":"output","id":"ISLmGe7IfG2xvOYwsyh0j","data":[],"key":"F5MRWCk6Yw"}],"key":"fNFKBGwZgl"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Make a similar Dask Array with similar shape but specifying the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LMr7MVwqJP"},{"type":"inlineCode","value":"chunks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"X8uYcUeUDq"},{"type":"text","value":" size:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bMqmJdBgSN"}],"key":"zOEniZRh5v"}],"key":"X9iXy5ArRx"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"big_da = da.ones(big_shape)\nbig_da","key":"kCa8oVIh96"},{"type":"output","id":"Y-IBlAQBn6iR3V0WYh9Z3","data":[{"output_type":"execute_result","execution_count":18,"metadata":{},"data":{"text/plain":{"content":"dask.array<ones_like, shape=(2000, 200, 2000), dtype=float64, chunksize=(289, 200, 289), chunktype=numpy.ndarray>","content_type":"text/plain"},"text/html":{"content":"<table>\n    <tr>\n        <td>\n            <table style=\"border-collapse: collapse;\">\n                <thead>\n                    <tr>\n                        <td> </td>\n                        <th> Array </th>\n                        <th> Chunk </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    \n                    <tr>\n                        <th> Bytes </th>\n                        <td> 5.96 GiB </td>\n                        <td> 127.44 MiB </td>\n                    </tr>\n                    \n                    <tr>\n                        <th> Shape </th>\n                        <td> (2000, 200, 2000) </td>\n                        <td> (289, 200, 289) </td>\n                    </tr>\n                    <tr>\n                        <th> Dask graph </th>\n                        <td colspan=\"2\"> 49 chunks in 1 graph layer </td>\n                    </tr>\n                    <tr>\n                        <th> Data type </th>\n                        <td colspan=\"2\"> float64 numpy.ndarray </td>\n                    </tr>\n                </tbody>\n            </table>\n        </td>\n        <td>\n        <svg width=\"250\" height=\"159\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n\n  <!-- Horizontal lines -->\n  <line x1=\"10\" y1=\"0\" x2=\"80\" y2=\"70\" style=\"stroke-width:2\" />\n  <line x1=\"10\" y1=\"38\" x2=\"80\" y2=\"109\" style=\"stroke-width:2\" />\n\n  <!-- Vertical lines -->\n  <line x1=\"10\" y1=\"0\" x2=\"10\" y2=\"38\" style=\"stroke-width:2\" />\n  <line x1=\"20\" y1=\"10\" x2=\"20\" y2=\"48\" />\n  <line x1=\"30\" y1=\"20\" x2=\"30\" y2=\"58\" />\n  <line x1=\"40\" y1=\"30\" x2=\"40\" y2=\"69\" />\n  <line x1=\"50\" y1=\"40\" x2=\"50\" y2=\"79\" />\n  <line x1=\"61\" y1=\"51\" x2=\"61\" y2=\"89\" />\n  <line x1=\"71\" y1=\"61\" x2=\"71\" y2=\"99\" />\n  <line x1=\"80\" y1=\"70\" x2=\"80\" y2=\"109\" style=\"stroke-width:2\" />\n\n  <!-- Colored Rectangle -->\n  <polygon points=\"10.0,0.0 80.58823529411765,70.58823529411765 80.58823529411765,109.18509833020366 10.0,38.596863036086\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n\n  <!-- Horizontal lines -->\n  <line x1=\"10\" y1=\"0\" x2=\"130\" y2=\"0\" style=\"stroke-width:2\" />\n  <line x1=\"20\" y1=\"10\" x2=\"140\" y2=\"10\" />\n  <line x1=\"30\" y1=\"20\" x2=\"150\" y2=\"20\" />\n  <line x1=\"40\" y1=\"30\" x2=\"160\" y2=\"30\" />\n  <line x1=\"50\" y1=\"40\" x2=\"170\" y2=\"40\" />\n  <line x1=\"61\" y1=\"51\" x2=\"181\" y2=\"51\" />\n  <line x1=\"71\" y1=\"61\" x2=\"191\" y2=\"61\" />\n  <line x1=\"80\" y1=\"70\" x2=\"200\" y2=\"70\" style=\"stroke-width:2\" />\n\n  <!-- Vertical lines -->\n  <line x1=\"10\" y1=\"0\" x2=\"80\" y2=\"70\" style=\"stroke-width:2\" />\n  <line x1=\"27\" y1=\"0\" x2=\"97\" y2=\"70\" />\n  <line x1=\"44\" y1=\"0\" x2=\"115\" y2=\"70\" />\n  <line x1=\"62\" y1=\"0\" x2=\"132\" y2=\"70\" />\n  <line x1=\"79\" y1=\"0\" x2=\"149\" y2=\"70\" />\n  <line x1=\"96\" y1=\"0\" x2=\"167\" y2=\"70\" />\n  <line x1=\"114\" y1=\"0\" x2=\"184\" y2=\"70\" />\n  <line x1=\"130\" y1=\"0\" x2=\"200\" y2=\"70\" style=\"stroke-width:2\" />\n\n  <!-- Colored Rectangle -->\n  <polygon points=\"10.0,0.0 130.0,0.0 200.58823529411765,70.58823529411765 80.58823529411765,70.58823529411765\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n\n  <!-- Horizontal lines -->\n  <line x1=\"80\" y1=\"70\" x2=\"200\" y2=\"70\" style=\"stroke-width:2\" />\n  <line x1=\"80\" y1=\"109\" x2=\"200\" y2=\"109\" style=\"stroke-width:2\" />\n\n  <!-- Vertical lines -->\n  <line x1=\"80\" y1=\"70\" x2=\"80\" y2=\"109\" style=\"stroke-width:2\" />\n  <line x1=\"97\" y1=\"70\" x2=\"97\" y2=\"109\" />\n  <line x1=\"115\" y1=\"70\" x2=\"115\" y2=\"109\" />\n  <line x1=\"132\" y1=\"70\" x2=\"132\" y2=\"109\" />\n  <line x1=\"149\" y1=\"70\" x2=\"149\" y2=\"109\" />\n  <line x1=\"167\" y1=\"70\" x2=\"167\" y2=\"109\" />\n  <line x1=\"184\" y1=\"70\" x2=\"184\" y2=\"109\" />\n  <line x1=\"200\" y1=\"70\" x2=\"200\" y2=\"109\" style=\"stroke-width:2\" />\n\n  <!-- Colored Rectangle -->\n  <polygon points=\"80.58823529411765,70.58823529411765 200.58823529411765,70.58823529411765 200.58823529411765,109.18509833020366 80.58823529411765,109.18509833020366\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n\n  <!-- Text -->\n  <text x=\"140.588235\" y=\"129.185098\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >2000</text>\n  <text x=\"220.588235\" y=\"89.886667\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,220.588235,89.886667)\">200</text>\n  <text x=\"35.294118\" y=\"93.890981\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(45,35.294118,93.890981)\">2000</text>\n</svg>\n        </td>\n    </tr>\n</table>","content_type":"text/html"}}}],"key":"m05wch9iu5"}],"key":"Ajbc78CEmJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# size of data\n#print(\"Memory size of NumPy dataset :  {:.2f} GiB\".format(big_np.nbytes / 1024/1024/1024))\nprint(\"Memory size of Dask dataset  :  {:.2f} GiB\".format(big_da.nbytes / 1024/1024/1024))","key":"MqnRwrSMCr"},{"type":"output","id":"2mCTvwLFjtjZ8rj1z3GwJ","data":[{"output_type":"stream","name":"stdout","text":"Memory size of Dask dataset  :  5.96 GiB\n"}],"key":"FFxvNe72T0"}],"key":"YyFeXd6uKS"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This may be close to the available memory/RAM that you have in your computer.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gLZZiFnXP8"}],"key":"yiRZFTJndg"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Let’s try bigger calculations on this array:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qnp1jASEE5"}],"key":"iV92qgduzb"}],"key":"WPRR0pC1Wt"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#%%time \n#z_np = (big_np + big_np.T)[::2,:].mean()","key":"aADogDC1OM"},{"type":"output","id":"JCvR0NntprYCSGlyFKnYI","data":[],"key":"nyX6XAKJVL"}],"key":"ciLcQNdYsk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n\nz_da = (big_da + big_da.T)[::2,:].mean(axis=2)\n\nresult = z_da.compute()","key":"uazS3ZWSFH"},{"type":"output","id":"G3RXxvhCZYsOiXBruXOWQ","data":[{"output_type":"stream","name":"stdout","text":"CPU times: user 207 ms, sys: 33 ms, total: 240 ms\nWall time: 1.02 s\n"}],"key":"sCKYS41wOd"}],"key":"IQdykNLRUT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#-- warning : do not try low level visualization with big arrays\n\n#z_da.visualize()","key":"FQYfXMnQdY"},{"type":"output","id":"8YjVcRzpN4rk06B4UtJGl","data":[],"key":"dqLNXxztAf"}],"key":"d0tw51I6ug"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"All the usual NumPy functions work on dask arrays, though the computations will remain lazy until you either call ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AaHCejp0CM"},{"type":"inlineCode","value":".compute()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Krow7NpV6I"},{"type":"text","value":", ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"akQ7C5jf4B"},{"type":"inlineCode","value":".load()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZpvtQ1hdtJ"},{"type":"text","value":" or your want to plot the data.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KN4dzupy7E"}],"key":"zwQYQiCL71"}],"key":"geeTSea7ws"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As we discussed above, the way that Dask arrays are chunked can significantly affect the performance. In the remainder of this notebook, let’s do a similar calculation using a different ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GjifzuJSwT"},{"type":"inlineCode","value":"chunks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OlpQ7jPFtS"},{"type":"text","value":" size.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"B6GB6Q10Xy"}],"key":"vr0oahqwa9"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We will learn more about best practices regarding ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"frLiedA6ZP"},{"type":"inlineCode","value":"chunk","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EaeMACrB6C"},{"type":"text","value":" size later during the tutorial.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PGIqXyksEd"}],"key":"owpg6GDWMX"},{"type":"heading","depth":2,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Supplementary Material: Rechunking Arrays","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Jq3hIQH6mC"}],"identifier":"supplementary-material-rechunking-arrays","label":"Supplementary Material: Rechunking Arrays","html_id":"supplementary-material-rechunking-arrays","implicit":true,"key":"JEmCe1NM8l"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"We can change the chunking of a Dask array, using the ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"NeZSmoCfHf"},{"type":"inlineCode","value":"rechunk","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"ccSqyJzOFr"},{"type":"text","value":" method. Please note that rechunking Dask arrays can be very expensive, so choosing an appropriate chunk size initially is ideal.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"aEKBZ2Vy3C"}],"key":"y1wevME53P"}],"key":"Aosgnsp4bs"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"new_chunk_shape = (50,50,50)\nrechunked_big_da = big_da.rechunk(new_chunk_shape)\nrechunked_big_da","key":"KjxkUJWqGC"},{"type":"output","id":"qJpYw3T2TrjO5gj6d4KuP","data":[{"output_type":"execute_result","execution_count":23,"metadata":{},"data":{"text/plain":{"content":"dask.array<rechunk-merge, shape=(2000, 200, 2000), dtype=float64, chunksize=(50, 50, 50), chunktype=numpy.ndarray>","content_type":"text/plain"},"text/html":{"content":"<table>\n    <tr>\n        <td>\n            <table style=\"border-collapse: collapse;\">\n                <thead>\n                    <tr>\n                        <td> </td>\n                        <th> Array </th>\n                        <th> Chunk </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    \n                    <tr>\n                        <th> Bytes </th>\n                        <td> 5.96 GiB </td>\n                        <td> 0.95 MiB </td>\n                    </tr>\n                    \n                    <tr>\n                        <th> Shape </th>\n                        <td> (2000, 200, 2000) </td>\n                        <td> (50, 50, 50) </td>\n                    </tr>\n                    <tr>\n                        <th> Dask graph </th>\n                        <td colspan=\"2\"> 6400 chunks in 2 graph layers </td>\n                    </tr>\n                    <tr>\n                        <th> Data type </th>\n                        <td colspan=\"2\"> float64 numpy.ndarray </td>\n                    </tr>\n                </tbody>\n            </table>\n        </td>\n        <td>\n        <svg width=\"250\" height=\"159\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n\n  <!-- Horizontal lines -->\n  <line x1=\"10\" y1=\"0\" x2=\"80\" y2=\"70\" style=\"stroke-width:2\" />\n  <line x1=\"10\" y1=\"9\" x2=\"80\" y2=\"80\" />\n  <line x1=\"10\" y1=\"19\" x2=\"80\" y2=\"89\" />\n  <line x1=\"10\" y1=\"28\" x2=\"80\" y2=\"99\" />\n  <line x1=\"10\" y1=\"38\" x2=\"80\" y2=\"109\" style=\"stroke-width:2\" />\n\n  <!-- Vertical lines -->\n  <line x1=\"10\" y1=\"0\" x2=\"10\" y2=\"38\" style=\"stroke-width:2\" />\n  <line x1=\"13\" y1=\"3\" x2=\"13\" y2=\"42\" />\n  <line x1=\"17\" y1=\"7\" x2=\"17\" y2=\"45\" />\n  <line x1=\"20\" y1=\"10\" x2=\"20\" y2=\"49\" />\n  <line x1=\"24\" y1=\"14\" x2=\"24\" y2=\"52\" />\n  <line x1=\"27\" y1=\"17\" x2=\"27\" y2=\"56\" />\n  <line x1=\"31\" y1=\"21\" x2=\"31\" y2=\"59\" />\n  <line x1=\"34\" y1=\"24\" x2=\"34\" y2=\"63\" />\n  <line x1=\"38\" y1=\"28\" x2=\"38\" y2=\"66\" />\n  <line x1=\"41\" y1=\"31\" x2=\"41\" y2=\"70\" />\n  <line x1=\"47\" y1=\"37\" x2=\"47\" y2=\"75\" />\n  <line x1=\"50\" y1=\"40\" x2=\"50\" y2=\"79\" />\n  <line x1=\"54\" y1=\"44\" x2=\"54\" y2=\"82\" />\n  <line x1=\"57\" y1=\"47\" x2=\"57\" y2=\"86\" />\n  <line x1=\"61\" y1=\"51\" x2=\"61\" y2=\"89\" />\n  <line x1=\"64\" y1=\"54\" x2=\"64\" y2=\"93\" />\n  <line x1=\"68\" y1=\"58\" x2=\"68\" y2=\"96\" />\n  <line x1=\"71\" y1=\"61\" x2=\"71\" y2=\"100\" />\n  <line x1=\"75\" y1=\"65\" x2=\"75\" y2=\"103\" />\n  <line x1=\"80\" y1=\"70\" x2=\"80\" y2=\"109\" style=\"stroke-width:2\" />\n\n  <!-- Colored Rectangle -->\n  <polygon points=\"10.0,0.0 80.58823529411765,70.58823529411765 80.58823529411765,109.18509833020366 10.0,38.596863036086\" style=\"fill:#8B4903A0;stroke-width:0\"/>\n\n  <!-- Horizontal lines -->\n  <line x1=\"10\" y1=\"0\" x2=\"130\" y2=\"0\" style=\"stroke-width:2\" />\n  <line x1=\"13\" y1=\"3\" x2=\"133\" y2=\"3\" />\n  <line x1=\"17\" y1=\"7\" x2=\"137\" y2=\"7\" />\n  <line x1=\"20\" y1=\"10\" x2=\"140\" y2=\"10\" />\n  <line x1=\"24\" y1=\"14\" x2=\"144\" y2=\"14\" />\n  <line x1=\"27\" y1=\"17\" x2=\"147\" y2=\"17\" />\n  <line x1=\"31\" y1=\"21\" x2=\"151\" y2=\"21\" />\n  <line x1=\"34\" y1=\"24\" x2=\"154\" y2=\"24\" />\n  <line x1=\"38\" y1=\"28\" x2=\"158\" y2=\"28\" />\n  <line x1=\"41\" y1=\"31\" x2=\"161\" y2=\"31\" />\n  <line x1=\"47\" y1=\"37\" x2=\"167\" y2=\"37\" />\n  <line x1=\"50\" y1=\"40\" x2=\"170\" y2=\"40\" />\n  <line x1=\"54\" y1=\"44\" x2=\"174\" y2=\"44\" />\n  <line x1=\"57\" y1=\"47\" x2=\"177\" y2=\"47\" />\n  <line x1=\"61\" y1=\"51\" x2=\"181\" y2=\"51\" />\n  <line x1=\"64\" y1=\"54\" x2=\"184\" y2=\"54\" />\n  <line x1=\"68\" y1=\"58\" x2=\"188\" y2=\"58\" />\n  <line x1=\"71\" y1=\"61\" x2=\"191\" y2=\"61\" />\n  <line x1=\"75\" y1=\"65\" x2=\"195\" y2=\"65\" />\n  <line x1=\"80\" y1=\"70\" x2=\"200\" y2=\"70\" style=\"stroke-width:2\" />\n\n  <!-- Vertical lines -->\n  <line x1=\"10\" y1=\"0\" x2=\"80\" y2=\"70\" style=\"stroke-width:2\" />\n  <line x1=\"16\" y1=\"0\" x2=\"86\" y2=\"70\" />\n  <line x1=\"22\" y1=\"0\" x2=\"92\" y2=\"70\" />\n  <line x1=\"28\" y1=\"0\" x2=\"98\" y2=\"70\" />\n  <line x1=\"34\" y1=\"0\" x2=\"104\" y2=\"70\" />\n  <line x1=\"40\" y1=\"0\" x2=\"110\" y2=\"70\" />\n  <line x1=\"46\" y1=\"0\" x2=\"116\" y2=\"70\" />\n  <line x1=\"52\" y1=\"0\" x2=\"122\" y2=\"70\" />\n  <line x1=\"58\" y1=\"0\" x2=\"128\" y2=\"70\" />\n  <line x1=\"64\" y1=\"0\" x2=\"134\" y2=\"70\" />\n  <line x1=\"73\" y1=\"0\" x2=\"143\" y2=\"70\" />\n  <line x1=\"79\" y1=\"0\" x2=\"149\" y2=\"70\" />\n  <line x1=\"85\" y1=\"0\" x2=\"155\" y2=\"70\" />\n  <line x1=\"91\" y1=\"0\" x2=\"161\" y2=\"70\" />\n  <line x1=\"97\" y1=\"0\" x2=\"167\" y2=\"70\" />\n  <line x1=\"103\" y1=\"0\" x2=\"173\" y2=\"70\" />\n  <line x1=\"109\" y1=\"0\" x2=\"179\" y2=\"70\" />\n  <line x1=\"115\" y1=\"0\" x2=\"185\" y2=\"70\" />\n  <line x1=\"121\" y1=\"0\" x2=\"191\" y2=\"70\" />\n  <line x1=\"130\" y1=\"0\" x2=\"200\" y2=\"70\" style=\"stroke-width:2\" />\n\n  <!-- Colored Rectangle -->\n  <polygon points=\"10.0,0.0 130.0,0.0 200.58823529411765,70.58823529411765 80.58823529411765,70.58823529411765\" style=\"fill:#8B4903A0;stroke-width:0\"/>\n\n  <!-- Horizontal lines -->\n  <line x1=\"80\" y1=\"70\" x2=\"200\" y2=\"70\" style=\"stroke-width:2\" />\n  <line x1=\"80\" y1=\"80\" x2=\"200\" y2=\"80\" />\n  <line x1=\"80\" y1=\"89\" x2=\"200\" y2=\"89\" />\n  <line x1=\"80\" y1=\"99\" x2=\"200\" y2=\"99\" />\n  <line x1=\"80\" y1=\"109\" x2=\"200\" y2=\"109\" style=\"stroke-width:2\" />\n\n  <!-- Vertical lines -->\n  <line x1=\"80\" y1=\"70\" x2=\"80\" y2=\"109\" style=\"stroke-width:2\" />\n  <line x1=\"86\" y1=\"70\" x2=\"86\" y2=\"109\" />\n  <line x1=\"92\" y1=\"70\" x2=\"92\" y2=\"109\" />\n  <line x1=\"98\" y1=\"70\" x2=\"98\" y2=\"109\" />\n  <line x1=\"104\" y1=\"70\" x2=\"104\" y2=\"109\" />\n  <line x1=\"110\" y1=\"70\" x2=\"110\" y2=\"109\" />\n  <line x1=\"116\" y1=\"70\" x2=\"116\" y2=\"109\" />\n  <line x1=\"122\" y1=\"70\" x2=\"122\" y2=\"109\" />\n  <line x1=\"128\" y1=\"70\" x2=\"128\" y2=\"109\" />\n  <line x1=\"134\" y1=\"70\" x2=\"134\" y2=\"109\" />\n  <line x1=\"143\" y1=\"70\" x2=\"143\" y2=\"109\" />\n  <line x1=\"149\" y1=\"70\" x2=\"149\" y2=\"109\" />\n  <line x1=\"155\" y1=\"70\" x2=\"155\" y2=\"109\" />\n  <line x1=\"161\" y1=\"70\" x2=\"161\" y2=\"109\" />\n  <line x1=\"167\" y1=\"70\" x2=\"167\" y2=\"109\" />\n  <line x1=\"173\" y1=\"70\" x2=\"173\" y2=\"109\" />\n  <line x1=\"179\" y1=\"70\" x2=\"179\" y2=\"109\" />\n  <line x1=\"185\" y1=\"70\" x2=\"185\" y2=\"109\" />\n  <line x1=\"191\" y1=\"70\" x2=\"191\" y2=\"109\" />\n  <line x1=\"200\" y1=\"70\" x2=\"200\" y2=\"109\" style=\"stroke-width:2\" />\n\n  <!-- Colored Rectangle -->\n  <polygon points=\"80.58823529411765,70.58823529411765 200.58823529411765,70.58823529411765 200.58823529411765,109.18509833020366 80.58823529411765,109.18509833020366\" style=\"fill:#8B4903A0;stroke-width:0\"/>\n\n  <!-- Text -->\n  <text x=\"140.588235\" y=\"129.185098\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >2000</text>\n  <text x=\"220.588235\" y=\"89.886667\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,220.588235,89.886667)\">200</text>\n  <text x=\"35.294118\" y=\"93.890981\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(45,35.294118,93.890981)\">2000</text>\n</svg>\n        </td>\n    </tr>\n</table>","content_type":"text/html"}}}],"key":"vCHkWStjrG"}],"key":"ZDRbvJMeVM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n# perform big computation on chunked array\n\nz_da_rechunked = (rechunked_big_da + rechunked_big_da.T)[::2,:].mean(axis=2)\n\nresult = z_da_rechunked.compute()","key":"rvtgvE8MxG"},{"type":"output","id":"nauSo41VxhNgUdo_iytrT","data":[{"output_type":"stream","name":"stdout","text":"CPU times: user 16 s, sys: 954 ms, total: 17 s\nWall time: 41.6 s\n"}],"key":"fzJdfk3DR2"}],"key":"QVMoz5zy2w"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can see how the choice of smaller chunks (more total chunks) ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BmhSiSX5NZ"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"significantly","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Bo1EKHb2HF"}],"key":"d7zx0TajFG"},{"type":"text","value":" reduce the total performance of our computation.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qNksHzjbHb"}],"key":"HsabK2hgmm"},{"type":"div","class":"alert alert-block alert-info","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"TIP:","key":"FYDlHk1Kqr"}],"key":"IA2CWF0z8C"},{"type":"text","value":" As a rule of thumb, a chunk should be big enough so that the computation on that chunk take significantly longer than the overhead from Dask scheduler. The Dask scheduler takes roughly 1ms per task for scheduling.","key":"g7ruS5k63e"}],"key":"UootcDE9c0"}],"key":"FSrqmIWNlJ"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Let’s try a bigger chunk size:","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"H5kcquUzMg"}],"key":"Z7HAX0NjLI"}],"key":"cSzcNynQkT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"new_chunk_shape = (500, 100, 500)\n#big_chunk = \n\nrechunked_big_da = big_da.rechunk(new_chunk_shape)\nrechunked_big_da","key":"p1mKGhEuk0"},{"type":"output","id":"nD9du-0WaD0bUyIloR3OT","data":[{"output_type":"execute_result","execution_count":25,"metadata":{},"data":{"text/plain":{"content":"dask.array<rechunk-merge, shape=(2000, 200, 2000), dtype=float64, chunksize=(500, 100, 500), chunktype=numpy.ndarray>","content_type":"text/plain"},"text/html":{"content":"<table>\n    <tr>\n        <td>\n            <table style=\"border-collapse: collapse;\">\n                <thead>\n                    <tr>\n                        <td> </td>\n                        <th> Array </th>\n                        <th> Chunk </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    \n                    <tr>\n                        <th> Bytes </th>\n                        <td> 5.96 GiB </td>\n                        <td> 190.73 MiB </td>\n                    </tr>\n                    \n                    <tr>\n                        <th> Shape </th>\n                        <td> (2000, 200, 2000) </td>\n                        <td> (500, 100, 500) </td>\n                    </tr>\n                    <tr>\n                        <th> Dask graph </th>\n                        <td colspan=\"2\"> 32 chunks in 2 graph layers </td>\n                    </tr>\n                    <tr>\n                        <th> Data type </th>\n                        <td colspan=\"2\"> float64 numpy.ndarray </td>\n                    </tr>\n                </tbody>\n            </table>\n        </td>\n        <td>\n        <svg width=\"250\" height=\"159\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n\n  <!-- Horizontal lines -->\n  <line x1=\"10\" y1=\"0\" x2=\"80\" y2=\"70\" style=\"stroke-width:2\" />\n  <line x1=\"10\" y1=\"19\" x2=\"80\" y2=\"89\" />\n  <line x1=\"10\" y1=\"38\" x2=\"80\" y2=\"109\" style=\"stroke-width:2\" />\n\n  <!-- Vertical lines -->\n  <line x1=\"10\" y1=\"0\" x2=\"10\" y2=\"38\" style=\"stroke-width:2\" />\n  <line x1=\"27\" y1=\"17\" x2=\"27\" y2=\"56\" />\n  <line x1=\"45\" y1=\"35\" x2=\"45\" y2=\"73\" />\n  <line x1=\"62\" y1=\"52\" x2=\"62\" y2=\"91\" />\n  <line x1=\"80\" y1=\"70\" x2=\"80\" y2=\"109\" style=\"stroke-width:2\" />\n\n  <!-- Colored Rectangle -->\n  <polygon points=\"10.0,0.0 80.58823529411765,70.58823529411765 80.58823529411765,109.18509833020366 10.0,38.596863036086\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n\n  <!-- Horizontal lines -->\n  <line x1=\"10\" y1=\"0\" x2=\"130\" y2=\"0\" style=\"stroke-width:2\" />\n  <line x1=\"27\" y1=\"17\" x2=\"147\" y2=\"17\" />\n  <line x1=\"45\" y1=\"35\" x2=\"165\" y2=\"35\" />\n  <line x1=\"62\" y1=\"52\" x2=\"182\" y2=\"52\" />\n  <line x1=\"80\" y1=\"70\" x2=\"200\" y2=\"70\" style=\"stroke-width:2\" />\n\n  <!-- Vertical lines -->\n  <line x1=\"10\" y1=\"0\" x2=\"80\" y2=\"70\" style=\"stroke-width:2\" />\n  <line x1=\"40\" y1=\"0\" x2=\"110\" y2=\"70\" />\n  <line x1=\"70\" y1=\"0\" x2=\"140\" y2=\"70\" />\n  <line x1=\"100\" y1=\"0\" x2=\"170\" y2=\"70\" />\n  <line x1=\"130\" y1=\"0\" x2=\"200\" y2=\"70\" style=\"stroke-width:2\" />\n\n  <!-- Colored Rectangle -->\n  <polygon points=\"10.0,0.0 130.0,0.0 200.58823529411765,70.58823529411765 80.58823529411765,70.58823529411765\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n\n  <!-- Horizontal lines -->\n  <line x1=\"80\" y1=\"70\" x2=\"200\" y2=\"70\" style=\"stroke-width:2\" />\n  <line x1=\"80\" y1=\"89\" x2=\"200\" y2=\"89\" />\n  <line x1=\"80\" y1=\"109\" x2=\"200\" y2=\"109\" style=\"stroke-width:2\" />\n\n  <!-- Vertical lines -->\n  <line x1=\"80\" y1=\"70\" x2=\"80\" y2=\"109\" style=\"stroke-width:2\" />\n  <line x1=\"110\" y1=\"70\" x2=\"110\" y2=\"109\" />\n  <line x1=\"140\" y1=\"70\" x2=\"140\" y2=\"109\" />\n  <line x1=\"170\" y1=\"70\" x2=\"170\" y2=\"109\" />\n  <line x1=\"200\" y1=\"70\" x2=\"200\" y2=\"109\" style=\"stroke-width:2\" />\n\n  <!-- Colored Rectangle -->\n  <polygon points=\"80.58823529411765,70.58823529411765 200.58823529411765,70.58823529411765 200.58823529411765,109.18509833020366 80.58823529411765,109.18509833020366\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n\n  <!-- Text -->\n  <text x=\"140.588235\" y=\"129.185098\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >2000</text>\n  <text x=\"220.588235\" y=\"89.886667\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,220.588235,89.886667)\">200</text>\n  <text x=\"35.294118\" y=\"93.890981\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(45,35.294118,93.890981)\">2000</text>\n</svg>\n        </td>\n    </tr>\n</table>","content_type":"text/html"}}}],"key":"ImPsOsPQLP"}],"key":"XbTZXkDmNd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n# perform big computation on chunked array\n\nz_da_rechunked = (rechunked_big_da + rechunked_big_da.T)[::2,:].mean(axis=2)\n\nresult = z_da_rechunked.compute()","key":"D3TibrJE8e"},{"type":"output","id":"xwW-YmhQiz94kzjp7r5MS","data":[{"output_type":"stream","name":"stdout","text":"CPU times: user 984 ms, sys: 121 ms, total: 1.1 s\nWall time: 7.98 s\n"}],"key":"gj4TtCzqBt"}],"key":"OX4EY6JOt6"},{"type":"block","kind":"notebook-content","children":[{"type":"div","class":"alert alert-block alert-info","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"TIP:","key":"aQ3dRy87e1"}],"key":"Cqe4Kyr0mq"},{"type":"text","value":" As a rule of thumb, a chunk should be small enough to fit comfortably in the memory. Chunk sizes between 10MB-1GB are common, depending on your machine,","key":"A1XgqkN3nw"}],"key":"yj7kvYvB32"}],"key":"pO6iaIrYYp"}],"key":"nnjOkyVs0h"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"client.close()","key":"hT7jhRwieF"},{"type":"output","id":"Eq4zzWqO88lUlLU0i189o","data":[],"key":"rhExB94BOF"}],"key":"qFdE2IeYNH"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UKOv19K4qd"}],"identifier":"summary","label":"Summary:","html_id":"summary","implicit":true,"key":"m0007h2IZH"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Dask Array provides parallel computing capabilities by dividing arrays into smaller pieces called chunks.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uSMEWx2uVq"}],"key":"teT23uPcji"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Blocked algorithms split large computations into smaller computations which operate on subsets of the array.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Gjg84vF4oP"}],"key":"MqGKgX96qg"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Dask Array supports efficient computation on large arrays through a combination of lazy evaluation and task parallelism.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Ds3dRHQiZJ"}],"key":"mxZNddxzHN"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Dask Array can be used as a drop-in replacement for NumPy ndarray, with a similar API and support for a subset of NumPy functions.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"u1pUmUvdfF"}],"key":"RRKyi8e3ts"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"The way that arrays are chunked can significantly affect total performance. Poor chunking can singifincantly worsen performance of Dask compared to NumPy.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"nTi5DSopuF"}],"key":"s1zxPhNDhR"}],"key":"KxCsV3eny2"}],"key":"BJlISjmPGb"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"x0AhMDluDI"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"xNAOVpdFWf"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Reference","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JvvWHjlc15"}],"key":"g6OsNw6Wws"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"link","url":"https://dask.org/","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Dask Docs","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"asVzpbiZR5"}],"urlSource":"https://dask.org/","key":"L68tGRHC4P"}],"key":"scbCN7otrC"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://examples.dask.org/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Dask Examples","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"cUX7vI8WA7"}],"urlSource":"https://examples.dask.org/","key":"gWWvqHxRvC"}],"key":"jYRNXI7x7f"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://github.com/dask/dask/","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Dask Code","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"lhC1F4OqwL"}],"urlSource":"https://github.com/dask/dask/","error":true,"key":"GjTAU2XY7L"}],"key":"t2Csi06azJ"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"link","url":"https://blog.dask.org/","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Dask Blog","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Np9SR9XCYA"}],"urlSource":"https://blog.dask.org/","key":"n66J6jE4pW"}],"key":"npwUeUDAnu"}],"key":"o3IS4vaJeP"}],"key":"BGs6P6eBA6"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Ask for help","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"NiFsQqk69a"}],"key":"RbTdIX0DLJ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":12,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"link","url":"http://stackoverflow.com/questions/tagged/dask","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"inlineCode","value":"dask","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"oXFvdarnTz"}],"urlSource":"http://stackoverflow.com/questions/tagged/dask","key":"xNIazMdXNi"},{"type":"text","value":" tag on Stack Overflow, for usage questions","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"kjtl5tQ85Q"}],"key":"WubO4oTnoS"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"link","url":"https://github.com/dask/dask/discussions","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"github discussions: dask","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"t9lT5KZ7BU"}],"urlSource":"https://github.com/dask/dask/discussions","error":true,"key":"KBAW8itfKu"},{"type":"text","value":" for general, non-bug, discussion, and usage questions","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"j1Fg6yhpXq"}],"key":"kjENtLy515"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"link","url":"https://github.com/dask/dask/issues/new","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"github issues: dask","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"qTyrgPBBfE"}],"urlSource":"https://github.com/dask/dask/issues/new","error":true,"key":"XX0GXL48D6"},{"type":"text","value":" for bug reports and feature requests","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"XYqrV8wvBc"}],"key":"ysYl9RqDfz"}],"key":"CFTmF0LgUD"}],"key":"QlSQoiNpP1"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Pieces of this notebook are adapted from the following sources","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"Mjed0Vb45p"}],"key":"WrO4B5q6YZ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":18,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"link","url":"https://tutorial.dask.org/02_array.html#Performance-comparison","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Dask Performace Comparison","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"eEI2QB9IEV"}],"urlSource":"https://tutorial.dask.org/02_array.html#Performance-comparison","key":"rI0R0mOF1y"}],"key":"IQ8HOwIrRj"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"link","url":"https://earth-env-data-science.github.io/lectures/dask/dask_arrays.html","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Dask Arrays by EEDS","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"M6ZLB5stkz"}],"urlSource":"https://earth-env-data-science.github.io/lectures/dask/dask_arrays.html","key":"BpFciuymJR"}],"key":"aZ3ADp1TET"}],"key":"WFnTuTLrki"}],"key":"lXIpIT8rgG"}],"key":"DygA3wHiti"}],"key":"cuZVpbmdnG"}],"key":"V1mHKj8r5M"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Dask Overview","url":"/notebooks/dask-overview","group":"Introductions to Dask"},"next":{"title":"Dask DataFrame","url":"/notebooks/dask-dataframe","group":"Introductions to Dask"}}},"domain":"http://localhost:3000"}